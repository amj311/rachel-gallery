// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String   @id @default(uuid())
    auth_id    String
    email      String   @unique
    givenName  String
    familyName String
    isAdmin    Boolean? @default(false)
}

model Inquiry {
    id          String       @id @default(uuid())
    name        String
    email       String
    message     String
    phone       String?
    occasion    String?
    date        DateTime?
    location    String?
    peopleQty   Int?
    readAt      DateTime?
    createdAt   DateTime     @default(now())
    Opportunity Opportunity?
}

model Client {
    id            String        @id @default(uuid())
    name          String
    email         String        @unique
    phone         String?
    Opportunities Opportunity[]
    Galleries     Gallery[]
}

model Opportunity {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    occasion  String?
    date      DateTime?
    location  String?
    peopleQty Int?

    contractType String?
    contractUrl  String?

    notes String?

    Client    Client   @relation(fields: [clientId], references: [id])
    clientId  String
    Inquiry   Inquiry? @relation(fields: [inquiryId], references: [id])
    inquiryId String?  @unique
    Gallery   Gallery? @relation(fields: [galleryId], references: [id])
    galleryId String?  @unique
}

model Gallery {
    id             String    @id //@default(uuid())
    clientName     String?
    clientEmail    String?
    name           String?
    slug           String?
    date           DateTime?
    isPublished    Boolean   @default(false)
    coverStyle     String?
    coverSettings  Json?
    visibility     String    @default("draft")
    shareMode      String?
    shareCode      String?
    shareEmails    String[]
    clientCanShare Boolean   @default(false)

    sections     GallerySection[]
    coverPhoto   Photo?           @relation(fields: [coverPhotoId], references: [id])
    coverPhotoId String?          @unique
    Client       Client?          @relation(fields: [clientId], references: [id])
    clientId     String?
    Opportunity  Opportunity?
}

model GallerySection {
    id        String  @id @default(uuid())
    Gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
    galleryId String
    name      String
    photos    Photo[]
    order     Int
}

model PortfolioSection {
    id     String  @id @default(uuid())
    type   String
    photos Photo[]
    name   String
    order  Int
}

// Photos can be in either gallery sections or portfolio sections.
// They cannot be in both.
// A photo must be duplicated on Google when copied into portfolio section
// We don't want to handle tricky conditional deleting
model Photo {
    id                 String            @id @default(uuid())
    filename           String
    googleFileId       String
    googleOwnerEmail   String
    width              Int
    height             Int
    size               Int
    type               String
    Gallery            Gallery?
    GallerySection     GallerySection?   @relation(fields: [gallerySectionId], references: [id], onDelete: Cascade)
    gallerySectionId   String?
    PortfolioSection   PortfolioSection? @relation(fields: [portfolioSectionId], references: [id], onDelete: Cascade)
    portfolioSectionId String?
    order              Int
}
